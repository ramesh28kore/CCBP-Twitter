const express = require("express");
const jwt = require("jsonwebtoken");
const sqlite3 = require("sqlite3");
const { open } = require("sqlite");
const bcrypt = require("bcrypt");

const app = express();

app.use(express.json());

const dbPath = path.join(__dirname, "todoApplication.db");

let db = null;

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server is running at http:/localhost:3000/");
    });
  } catch (e) {
    console.log(e.message);
  }
};


initializeDBAndServer();

// Helper function to generate JWT token
const generateToken = (username) => {
  return jwt.sign({ username }, "secret_key", { expiresIn: "1h" });
};

// API 1: User Registration
app.post("/register", async (req, res) => {
  const { username, password, name, gender } = req.body;

  // Check if the user already exists
  const userExistsQuery = "SELECT * FROM user WHERE username = ?";
  const user = await db.get(userExistsQuery, [username]);

  if (user) {
    return res.status(400).send("User already exists");
  }

  // Check password length
  if (password.length < 6) {
    return res.status(400).send("Password is too short");
  }

  // Hash the password
  const hashedPassword = await bcrypt.hash(password, 10);

  // Insert user into the database
  const insertUserQuery =
    "INSERT INTO user (name, username, password, gender) VALUES (?, ?, ?, ?)";
  await db.run(insertUserQuery, [name, username, hashedPassword, gender]);

  res.status(200).send("User created successfully");
});

// API 2: User Login
app.post("/login", async (req, res) => {
  const { username, password } = req.body;

  // Check if the user exists
  const userQuery = "SELECT * FROM user WHERE username = ?";
  const user = await db.get(userQuery, [username]);

  if (!user) {
    return res.status(400).send("Invalid user");
  }

  // Check password
  const passwordMatch = await bcrypt.compare(password, user.password);

  if (!passwordMatch) {
    return res.status(400).send("Invalid password");
  }

  // Generate JWT token and send it in the response
  const token = generateToken(username);
  res.json({ jwtToken: token });
});

// Middleware to authenticate JWT token
const authenticateToken = (req, res, next) => {
  const token = req.header("Authorization");

  if (!token) {
    return res.status(401).send("Invalid JWT Token");
  }

  jwt.verify(token, "secret_key", (err, user) => {
    if (err) {
      return res.status(401).send("Invalid JWT Token");
    }
    req.user = user;
    next();
  });
};
// API 3: Get User's Tweet Feed
app.get("/user/tweets/feed", authenticateToken, async (req, res) => {
  const userId = req.user.user_id;

  try {
    // Fetch the latest tweets of people whom the user follows (limit to 4 tweets)
    const userTweetFeedQuery = `
      SELECT u.username AS username, t.tweet AS tweet, t.date_time AS dateTime
      FROM user AS u
      JOIN follower AS f ON u.user_id = f.following_user_id
      JOIN tweet AS t ON f.following_user_id = t.user_id
      WHERE f.follower_user_id = ${userId}
      ORDER BY t.date_time DESC
      LIMIT 4
    `;

    const tweetFeed = await db.all(userTweetFeedQuery);

    res.status(200).json(tweetFeed);
  } catch (error) {
    console.error(error);
    res.status(500).send("Internal Server Error");
  }
});


// API 4: Get User's Following List
app.get("/user/following", authenticateToken, async (req, res) => {
  const userId = req.user.user_id;

  try {
    // Fetch the list of people whom the user follows
    const userFollowingQuery = `
      SELECT u.name AS name
      FROM user AS u
      JOIN follower AS f ON u.user_id = f.following_user_id
      WHERE f.follower_user_id = ${userId}
    `;

    const followingList = await db.all(userFollowingQuery);

    res.status(200).json(followingList);
  } catch (error) {
    console.error(error);
    res.status(500).send("Internal Server Error");
  }
});

// API 5: Get User's Followers List
app.get("/user/followers", authenticateToken, async (req, res) => {
  const userId = req.user.user_id;

  try {
    // Fetch the list of people who follow the user
    const userFollowersQuery = `
      SELECT u.name AS name
      FROM user AS u
      JOIN follower AS f ON u.user_id = f.follower_user_id
      WHERE f.following_user_id = ${userId}
    `;

    const followersList = await db.all(userFollowersQuery);

    res.status(200).json(followersList);
  } catch (error) {
    console.error(error);
    res.status(500).send("Internal Server Error");
  }
});


// API 6: Get Tweet by ID
app.get("/tweets/:tweetId", authenticateToken, async (req, res) => {
  const { tweetId } = req.params;

  try {
    // Fetch the tweet by its ID
    const tweetQuery = `
      SELECT tweet, likes, replies, date_time AS dateTime
      FROM tweet
      WHERE tweet_id = ${tweetId}
    `;

    const tweet = await db.get(tweetQuery);

    if (!tweet) {
      res.status(404).json({ error: "Tweet not found" });
    } else {
      res.status(200).json(tweet);
    }
  } catch (error) {
    console.error(error);
    res.status(500).send("Internal Server Error");
  }
});



/
// API 7: Get Likes for a Tweet
app.get(
  "/tweets/:tweetId/likes",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request.params;

    // Check if the user is following the tweet's author or not
    const isFollowing = await checkIfFollowing(tweetId, request.user.user_id);

    if (!isFollowing) {
      response.status(401).send("Invalid Request");
      return;
    }

    // Fetch the list of usernames who liked the tweet with tweetId
    const likesQuery = `
    SELECT u.username
    FROM like l
    INNER JOIN user u ON l.user_id = u.user_id
    WHERE l.tweet_id = ${tweetId}
  `;

    const likes = await db.all(likesQuery);
    response.json({ likes });
  }
);
// API 8: Get Replies for a Tweet
app.get(
  "/tweets/:tweetId/replies",
  authenticateToken,
  async (request, response) => {
    const { tweetId } = request.params;

    // Check if the user is following the tweet's author or not
    const isFollowing = await checkIfFollowing(tweetId, request.user.user_id);

    if (!isFollowing) {
      response.status(401).send("Invalid Request");
      return;
    }

    // Fetch the list of replies for the tweet with tweetId
    const repliesQuery = `
    SELECT u.name, r.reply
    FROM reply r
    INNER JOIN user u ON r.user_id = u.user_id
    WHERE r.tweet_id = ${tweetId}
  `;

    const replies = await db.all(repliesQuery);
    response.json({ replies });
  }
);
// API 9: Get User's Tweets
app.get("/user/tweets", authenticateToken, async (request, response) => {
  const userId = request.user.user_id;

  // Fetch a list of all tweets of the user with userId
  const userTweetsQuery = `
    SELECT tweet, likes, replies, date_time AS dateTime
    FROM tweet
    WHERE user_id = ${userId}
  `;

  try {
    const userTweets = await db.all(userTweetsQuery);
    response.json(userTweets);
  } catch (error) {
    response.status(500).send("Error fetching user tweets");
  }
});
// API 10: Create a Tweet
app.post("/user/tweets", authenticateToken, async (request, response) => {
  const { tweet } = request.body;
  const userId = request.user.user_id;
  const dateTime = new Date().toISOString(); // Get the current date and time

  // Insert the new tweet into the tweet table
  const createTweetQuery = `
    INSERT INTO tweet (tweet, user_id, date_time)
    VALUES ('${tweet}', ${userId}, '${dateTime}')
  `;

  try {
    await db.run(createTweetQuery);
    response.send("Created a Tweet");
  } catch (error) {
    response.status(500).send("Error creating the tweet");
  }
});
// API 11: Delete a Tweet
app.delete("/tweets/:tweetId", authenticateToken, async (request, response) => {
  const { tweetId } = request.params;
  const userId = request.user.user_id;

  // Check if the user is the author of the tweet with tweetId
  const isAuthor = await checkIfTweetAuthor(tweetId, userId);

  if (!isAuthor) {
    response.status(401).send("Invalid Request");
    return;
  }

  // Delete the tweet with tweetId
  const deleteTweetQuery = `DELETE FROM tweet WHERE tweet_id = ${tweetId}`;

  try {
    await db.run(deleteTweetQuery);
    response.send("Tweet Removed");
  } catch (error) {
    response.status(500).send("Error deleting the tweet");
  }
});
module.exports = app; 